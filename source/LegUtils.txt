Attribute VB_Name = "LegUtils"
Option Explicit

Function SliceIntoLegs(thisLeg As Leg, tNow As Double, zigBuffer As Double) As Legs
        
    Dim beforeLeg As Leg
    Set beforeLeg = Factory.createLeg(thisLeg.name + ".1")
    Dim afterLeg As Leg
    Set afterLeg = Factory.createLeg(thisLeg.name + ".2")
    
    Dim times As Collection
    Set times = thisLeg.times
    Dim bearings As Collection
    Set bearings = thisLeg.bearings
    
    ' work out half-buffer
    Dim halfWid As Double
    halfWid = zigBuffer / 2
    Dim dLen As Integer
    dLen = times.Count
    
    Dim StartTime As Double
    StartTime = times.Item(1)
    
    Dim ctr As Integer
    For ctr = 1 To dLen
    
        Dim thisTime As Double
        thisTime = times.Item(ctr)
        Dim elapsed As Double
        elapsed = thisTime - StartTime
    
        ' are we in the first half?
        If (thisTime <= tNow - halfWid) Then
            ' great, this one is ok
            beforeLeg.times.add thisTime
            beforeLeg.bearings.add bearings.Item(ctr)
        ElseIf (thisTime >= tNow + halfWid) Then
            ' great, this one is ok
            afterLeg.times.add thisTime
            afterLeg.bearings.add bearings.Item(ctr)
        End If
    Next ctr
    
    Dim res As Legs
    Set res = New Legs
    
    res.add beforeLeg
    res.add afterLeg
    
    ' and pass out the results
    Set SliceIntoLegs = res
    
End Function

Public Sub testSlicing()
    
    Debug.Print "testSlicing"

    Dim data As Legs
    Set data = New Legs
    
    Dim track1 As Leg
    Set track1 = New Leg
    
    Dim times As Collection
    Dim bearings As Collection
    Set times = track1.times
    Set bearings = track1.bearings
    
    times.add 100
    times.add 200
    times.add 300
    times.add 400
    times.add 500
    times.add 600
    times.add 700
    times.add 800
    times.add 900
    times.add 1000
    
    bearings.add 30
    bearings.add 40
    bearings.add 50
    bearings.add 60
    bearings.add 70
    bearings.add 80
    bearings.add 90
    bearings.add 100
    bearings.add 110
    bearings.add 210
    
    
    Dim slices As Legs
    Dim tNow As Double, zigBuffer As Double
    
    ' get ready for data results
    Dim before As Leg
    Dim after As Leg
    
    ' ok, start of track
    tNow = 100
    zigBuffer = 200
    
    Set slices = SliceIntoLegs(track1, tNow, zigBuffer)
    
    ' get results
    Set before = slices.Items(1)
    Set after = slices.Items(2)
    
    If (before.times.Count > 0) Then
        Debug.Print "we should have zero before: " & before.times.Count
    End If
    If (after.times.Count = 0) Then
        Debug.Print "we should have non zero after: " & after.times.Count
    End If
    
    If (before.times.Count <> before.bearings.Count) Then
        Debug.Print "before arrays should be of same length"
    End If
    
    If (after.times.Count <> after.bearings.Count) Then
        Debug.Print "after arrays should be of same length"
    End If
    
    ' ok, mid of track, out of phase
    tNow = 510
    zigBuffer = 200
    
    Set slices = SliceIntoLegs(track1, tNow, zigBuffer)
    
    ' get results
    Set before = slices.Items(1)
    Set after = slices.Items(2)
    
    If (before.times.Count <> 4) Then
        Debug.Print "we have wrong before:" & before.times.Count
    End If
    If (after.times.Count <> 4) Then
        Debug.Print "we have wrong after:" & after.times.Count
    End If
    
    ' ok, mid of track, in phase
    tNow = 500
    zigBuffer = 100
    
    Set slices = SliceIntoLegs(track1, tNow, zigBuffer)
    
    ' get results
    Set before = slices.Items(1)
    Set after = slices.Items(2)
    
    If (before.times.Count <> 4) Then
        Debug.Print "we have wrong before:" & before.times.Count
    End If
    If (after.times.Count <> 5) Then
        Debug.Print "we have wrong after:" & after.times.Count
    End If
    
        
    ' ok, late in track, in phase
    tNow = 900
    zigBuffer = 200
    
    Set slices = SliceIntoLegs(track1, tNow, zigBuffer)
    
    ' get results
    Set before = slices.Items(1)
    Set after = slices.Items(2)
    
    If (before.times.Count <> 8) Then
        Debug.Print "we have wrong before:" & before.times.Count
    End If
    If (after.times.Count <> 1) Then
        Debug.Print "we have wrong after:" & after.times.Count
    End If
    
End Sub

Public Sub testReplaceLegs()
    Debug.Print "testReplaceLegs"

    Dim tLegs As New Legs
    Set tLegs = New Legs
    
    Dim ctr
    For ctr = 1 To 6
        Dim thisLeg As New Leg
        Set thisLeg = Factory.createLeg("L" & ctr)
        tLegs.add thisLeg
    Next ctr
    
    ' ok, we have our list.  let's play about with cycling through
    Dim beforeLeg As Leg
    Set beforeLeg = Factory.createLeg("L2.1")
    Dim afterLeg As Leg
    Set afterLeg = Factory.createLeg("L2.2")
    
    ' ok, we're going to swap L2 for L2.1 and L2.2
    
    Dim testStr As String
    
    While tLegs.complete <> True
        ' ok, loop through them
        For Each thisLeg In tLegs.Items
            If Not thisLeg.Processed Then
                ' ok, we need to process it
                
                If thisLeg.name = "L2" Then
                    ' ok, do the replace
                    tLegs.replace thisLeg, beforeLeg, afterLeg
                    
                    ' ok, we need to drop out of this loop
                    Exit For
                Else
                    testStr = testStr & thisLeg.name & ","
                    thisLeg.Processed = True
                End If
            End If
        Next thisLeg
    Wend
    
    If (testStr <> "L1,L2.1,L2.2,L3,L4,L5,L6,") Then
        Debug.Print "Haven't processed legs correctly"
    End If
    
End Sub



