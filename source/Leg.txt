VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Leg"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit
' this is a leg, consisting of times and bearings
' == It's made into a class so that we collect the data
' == for a leg into one place

Private pTimes As Collection
Private pBearings As Collection

' whether we have processed this leg (we don't need to process them twice)
Private pProcessed As Boolean

' the name for this leg
Private PName As String

' the overall score for this leg
Private pOptimiseScore As Double

' keep track of the calculations used to produce this leg
Private pCalculations As Collection

Private Sub Class_Initialize()
    Set pTimes = New Collection
    Set pBearings = New Collection
    Set pCalculations = New Collection
    pProcessed = False
    pOptimiseScore = 0
End Sub

Public Property Get OptimiseScore() As Double
    OptimiseScore = pOptimiseScore
End Property

Public Property Let OptimiseScore(value As Double)
    pOptimiseScore = value
End Property

Public Property Get calcs() As Collection
    Set calcs = pCalculations
End Property

Public Property Get hasData() As Boolean
    hasData = pTimes.Count >= 2
End Property

Public Property Get times() As Collection
    Set times = pTimes
End Property

Public Property Set times(data As Collection)
    Set pTimes = data
End Property

Public Property Get bearings() As Collection
    Set bearings = pBearings
End Property

Public Property Set bearings(data As Collection)
    Set pBearings = data
End Property

Public Property Get Processed() As Boolean
    Processed = pProcessed
End Property

Public Property Let Processed(value As Boolean)
    pProcessed = value
End Property

Public Property Get Name() As String
    Name = PName
End Property
Public Property Let Name(value As String)
    PName = value
End Property

Public Function sliceWith(periods As Collection) As Legs
    Dim ctr As Integer
    ctr = 1
    
    Dim res As Legs
    Set res = New Legs

    ' ok, loop the periods
    Dim thisP As TimePeriod
    For Each thisP In periods
    
        If ctr > times.Count Then
            Exit For
        End If
        
        ' ok, work through our data items, checking them against the time periods
        Dim thisT As Long
        thisT = times.Item(ctr)
        
        While thisT < thisP.StartTime
            ctr = ctr + 1
            
            If ctr > times.Count Then
                Exit For
            End If

            thisT = times.Item(ctr)
        Wend
        
        ' ok, create a new leg
        Dim newLeg As Leg
        Set newLeg = Factory.createLeg("L" & res.Items.Count + 1)
        
        ' add any times, until we've exited the loop
        While thisT <= thisP.EndTime And ctr <= times.Count
            Dim thisB As Double
            thisB = bearings.Item(ctr)
            
            ' ok, add this items
            newLeg.times.add thisT
            newLeg.bearings.add thisB
            
            ' and move to the next one
            ctr = ctr + 1
            
            If ctr <= times.Count Then
                thisT = times.Item(ctr)
            End If
        Wend
        
        ' ok, we're past the end of this time period, we can store it
        If newLeg.times.Count > 0 Then
            res.add newLeg
        End If
        
    Next thisP
    
    Set sliceWith = res
End Function
