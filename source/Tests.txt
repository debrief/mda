Attribute VB_Name = "Tests"
Option Explicit


Public Const gDATA_1 As String = "Data 1"
Public Const gDATA_2 As String = "Data 2"

' run through all of our tests
Public Sub AllTests()
    Debug.Print "== running all tests =="
    LegUtils.testSlicing
    LegUtils.testReplaceLegs
    Debug.Print "==  tests complete   =="
End Sub

'This code Exports all VBA modules
Sub SaveCodeModules()

    Dim i%, sName$
    
    With ThisWorkbook.VBProject
        For i% = 1 To .VBComponents.Count
            If .VBComponents(i%).CodeModule.CountOfLines > 0 Then
                Dim outPath
                sName$ = .VBComponents(i%).CodeModule.name
                outPath = Application.ActiveWorkbook.Path & "\source\" & sName$ & ".txt"
                .VBComponents(i%).Export outPath
            End If
        Next i
    End With
    
End Sub

' run through a test
Public Sub testOptimisation()
    ' clear the console
    clearDebugConsole

    Dim dataset As Legs
    Set dataset = Tests.collateTheseLegs
    
    Dim thisData As leg
    Set thisData = dataset.Items(2)
    
    
    Dim arrTimes As Collection
    Dim arrBearings As Collection
    Set arrTimes = thisData.Times
    Set arrBearings = thisData.Bearings
    
    Debug.Print "found " & arrBearings.Count & " bearings."
    
    Dim thisScore As Double, zigOffset As Double
    Dim threshold As Double, sliceDelta As Double
    zigOffset = 20
    threshold = 1
    sliceDelta = 0.1
    
    Dim diagnostics As Integer
    diagnostics = Optimisation.dSLICE_SCORES
    
    Dim slices As Collection
    Set slices = sliceThisLeg(arrTimes, arrBearings, zigOffset, threshold, sliceDelta, diagnostics)
    
    Dim beforeTimes As Collection
    Dim beforeBearings As Collection
    Dim afterTimes As Collection
    Dim afterBearings As Collection
    
    If (slices.Count = 0) Then
        Debug.Print "Failed to improve on single leg"
    Else
        Set beforeTimes = slices.Item(LegUtils.gBEFORE_TIMES)
        Set beforeBearings = slices.Item(LegUtils.gBEFORE_BEARINGS)
        Set afterTimes = slices.Item(LegUtils.gAFTER_TIMES)
        Set afterBearings = slices.Item(LegUtils.gAFTER_BEARINGS)
        
        Debug.Print "L1:" & beforeTimes.Item(0) & " to:" & beforeTimes.Item(beforeTimes.Count)
        Debug.Print "L2:" & afterTimes.Item(0) & " to:" & afterTimes.Item(beforeTimes.Count)
    End If
    
End Sub

' produce a single composite time/bearing dataset
Private Function collateThisLeg(name As String) As leg

    Dim res As leg
    Set res = Factory.createLeg(name)
    
    res.Times.add 0
    res.Times.add 10
    res.Times.add 20
    res.Times.add 30
    res.Times.add 40
    res.Times.add 50
    res.Times.add 60
    res.Times.add 70
    res.Times.add 80
    res.Times.add 90
    res.Times.add 100
    
    res.Bearings.add 0 + Rnd * 10
    res.Bearings.add 10 + Rnd * 10
    res.Bearings.add 20 + Rnd * 10
    res.Bearings.add 30 + Rnd * 10
    res.Bearings.add 40 + Rnd * 10
    res.Bearings.add 50 + Rnd * 10
    res.Bearings.add 60 + Rnd * 10
    res.Bearings.add 70 + Rnd * 10
    res.Bearings.add 80 + Rnd * 10
    res.Bearings.add 90 + Rnd * 10
    res.Bearings.add 100 + Rnd * 10
        
    Set collateThisLeg = res

End Function

' produce a collection of datasets
Public Function collateTheseLegs() As Legs
    Dim res As Legs
    Set res = New Legs
    
    res.add collateThisLeg("Leg1")
    res.add collateThisLeg("Leg2")
        
    Set collateTheseLegs = res
End Function


