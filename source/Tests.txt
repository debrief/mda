Attribute VB_Name = "Tests"
Option Explicit

' run through all of our tests
Public Sub AllTests()
    Debug.Print "== running all tests =="
    testReplaceLegs
    testSlicingByOwnship
    Tests.testIncomplete
'    Collate.testGetOwnshipLegs
'    Collate.testGetSensorLegs
    LegUtils.testReplaceLegs
    LegUtils.testSlicing
    
  '  Tests.testFullCycle
    Debug.Print "==  tests complete   =="
End Sub

'This code Exports all VBA modules
Sub SaveCodeModules()

    Dim i%, sName$
    
    With ThisWorkbook.VBProject
        For i% = 1 To .VBComponents.Count
            If .VBComponents(i%).CodeModule.CountOfLines > 0 Then
                Dim outPath
                sName$ = .VBComponents(i%).CodeModule.Name
                outPath = Application.ActiveWorkbook.Path & "\source\" & sName$ & ".txt"
                .VBComponents(i%).Export outPath
            End If
        Next i
    End With
    
End Sub

' run through a test
Public Sub testOptimisation()

    Dim dataset As Legs
    Set dataset = Tests.createDemoLegs
    Dim thisData As Leg
    Set thisData = dataset.Items(2)
    Dim arrTimes As Collection
    Dim arrBearings As Collection
    Set arrTimes = thisData.times
    Set arrBearings = thisData.bearings
    
    Debug.Print "found " & arrBearings.Count & " bearings."
    
    Dim thisScore As Double, zigOffset As Double
    Dim threshold As Double, sliceDelta As Double
    zigOffset = 20
    threshold = 1
    sliceDelta = 0.1
    
    Dim diagnostics As Integer
    diagnostics = Optimisation.dSLICE_SCORES
    
    Dim slices As Legs
    Set slices = sliceThisLeg(thisData, zigOffset, threshold, sliceDelta, diagnostics, 1)
    
    Dim before As Leg
    Dim after As Leg
    
    If (slices.Items.Count = 0) Then
        Debug.Print "Failed to improve on single leg"
    Else
        Set before = slices.Items(1)
        Set after = slices.Items(2)
        
        Debug.Print "L1:" & before.times.Item(0) & " to:" & before.times.Item(before.times.Count)
        Debug.Print "L2:" & after.times.Item(0) & " to:" & after.times.Item(before.times.Count)
    End If
    
End Sub

' produce a single composite time/bearing dataset
Private Function collateThisLeg(Name As String) As Leg

    Dim res As Leg
    Set res = Factory.createLeg(Name)
    
    res.times.add 0
    res.times.add 10
    res.times.add 20
    res.times.add 30
    res.times.add 40
    res.times.add 50
    res.times.add 60
    res.times.add 70
    res.times.add 80
    res.times.add 90
    res.times.add 100
    
    res.bearings.add 0 + Rnd * 10
    res.bearings.add 10 + Rnd * 10
    res.bearings.add 20 + Rnd * 10
    res.bearings.add 30 + Rnd * 10
    res.bearings.add 40 + Rnd * 10
    res.bearings.add 50 + Rnd * 10
    res.bearings.add 60 + Rnd * 10
    res.bearings.add 70 + Rnd * 10
    res.bearings.add 80 + Rnd * 10
    res.bearings.add 90 + Rnd * 10
    res.bearings.add 100 + Rnd * 10
        
    Set collateThisLeg = res

End Function

' produce a collection of datasets
Public Function createDemoLegs() As Legs
    Dim res As Legs
    Set res = New Legs
    
    res.add collateThisLeg("Leg1")
    res.add collateThisLeg("Leg2")
    
    Set createDemoLegs = res
End Function

Public Sub testFullCycle()
    Debug.Print "testFullCycle"
    
    Dim data As Legs
    Set data = Tests.createDemoLegs
    
    Dim res As Legs
    Set res = data.determineTargetLegs("")
    
    If res.Items.Count <> 4 Then
        Debug.Print "failed to find four legs, found:" & res.Items.Count
    End If
    
End Sub

Public Sub testIncomplete()
    Debug.Print "testIncomplete"

    Dim L1 As Leg, L2 As Leg, L3 As Leg
    Set L1 = Factory.createLeg("L1")
    Set L2 = Factory.createLeg("L2")
    Set L3 = Factory.createLeg("L3")
    
    Dim tLegs As Legs
    Set tLegs = New Legs
    
    tLegs.add L1
    tLegs.add L2
    tLegs.add L3
    
    If (tLegs.complete) Then
        Debug.Print "Should not be complete 1"
    End If
    
    L1.Processed = True
    
    If (tLegs.complete) Then
        Debug.Print "Should not be complete 2"
    End If
    
    L3.Processed = True
    
    If (tLegs.complete) Then
        Debug.Print "Should not be complete 3"
    End If
    
    L2.Processed = True
    
    If (Not tLegs.complete) Then
        Debug.Print "Should be complete 4"
    End If
    
    
End Sub

Public Sub testSlicingByOwnship()
    Debug.Print "testSlicingByOwnship"
    
    ' start with the ownship legs
    Dim oLegs As Collection
    Set oLegs = New Collection
    
    oLegs.add Factory.createTimePeriod("O" & oLegs.Count + 1, 5, 12)
    oLegs.add Factory.createTimePeriod("O" & oLegs.Count + 1, 21, 31)
    oLegs.add Factory.createTimePeriod("O" & oLegs.Count + 1, 36, 36.5)
    oLegs.add Factory.createTimePeriod("O" & oLegs.Count + 1, 36.6, 48)
    
    ' now the bearing data
    Dim bData As Leg
    Set bData = Factory.createLeg("All bearings")
    
    ' and add some data
    Dim ctr As Integer
    For ctr = 1 To 60
        bData.times.add ctr
        bData.bearings.add ctr * 1.5
    Next ctr
    
    ' and slice it
    Dim res As Legs
    Set res = bData.sliceWith(oLegs)
    
    ' check the results
    If res.Items.Count <> 4 Then
        Debug.Print "Wrong count:" & res.Items.Count & " should be 4"
    End If
    
    If (res.Items(1).times(1) <> 5) Then
        Debug.Print "Wrong start"
    End If
    
End Sub

Public Sub outputLeg(Leg As Leg)
    Dim ctr As Integer
    Debug.Print "Leg:" & Leg.Name
    For ctr = 1 To Leg.times.Count
        Debug.Print Leg.times(ctr) & ", " & Leg.bearings(ctr)
    Next ctr
End Sub

