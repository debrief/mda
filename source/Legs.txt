VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Legs"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit
' this is series of legs
' == It's made into a class so that it have custom processing,
' == such as a replace operation that re-orders the children

Private pLegs As Collection

' keep track of the calculations used to produce these legs
Private pCalculations As Collection

Private Sub Class_Initialize()
    Set pLegs = New Collection
    Set pCalculations = New Collection
End Sub

Public Property Get Items() As Collection
    Set Items = pLegs
End Property

Public Property Get calcs() As Collection
    Set calcs = pCalculations
End Property

Public Sub add(Leg As Leg)
    pLegs.add Leg, Leg.name
End Sub

Public Property Get complete() As Boolean
    ' check if all the legs are complete
    Dim thisLeg As Leg
    For Each thisLeg In pLegs
        If Not thisLeg.Processed Then
            complete = False
            Exit Property
        End If
    Next thisLeg
    complete = True
End Property

Public Sub replace(original As Leg, before As Leg, after As Leg)
   
    ' ok, swap the original for the new ones
    pLegs.add before, before.name, original.name
    pLegs.add after, after.name, original.name
    pLegs.Remove original.name
End Sub

Public Function determineTargetLegs() As Legs
    Dim res As Legs
    Set res = New Legs
    
    Dim zigBuffer As Double, optimiseThreshold As Double, sliceDelta As Double, diags As Integer
    zigBuffer = 120
    optimiseThreshold = 0.01
    sliceDelta = 0.2
    diags = 0

    ' loop through legs
    While Me.complete <> True
        ' ok, loop through them
        Dim thisLeg As Leg
        For Each thisLeg In Items
            If Not thisLeg.Processed Then
    
                ' workout whole leg score
                Dim newLegs As Legs
                
                ' COMMENTING OUT THIS NEXT BIT, UNTIL WE HAVE BETTER DATA TO OPTIMISE
                ' Set newLegs = Optimisation.sliceThisLeg(thisLeg, zigBuffer, optimiseThreshold, sliceDelta, diags)
                If thisLeg.name = "Leg2" Then
                    Set newLegs = New Legs
                    newLegs.add Factory.createLeg("Leg2.1")
                    newLegs.add Factory.createLeg("Leg2.2")
                ElseIf thisLeg.name = "Leg2.2" Then
                    Set newLegs = New Legs
                    newLegs.add Factory.createLeg("Leg2.2.1")
                    newLegs.add Factory.createLeg("Leg2.2.2")
                Else
                    Set newLegs = Nothing
                End If
                
                ' did we get some?
                If newLegs Is Nothing Then
'                If Not newLegs Is Nothing And newLegs.Items.Count = 2 Then
                    ' ok, no slicing. This leg is done,
                    ' we can move onto the next one
                    thisLeg.Processed = True
                    
                    res.add thisLeg
                Else
                    ' ok, get swapping
                    replace thisLeg, newLegs.Items.Item(1), newLegs.Items.Item(2)
                    
                    ' and exit this for loop (so we restart at the beginning
                    Exit For
                End If
            End If
        Next thisLeg
    Wend
    
    Set determineTargetLegs = res
End Function

