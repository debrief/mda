VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Legs"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit
' this is series of legs
' == It's made into a class so that it have custom processing,
' == such as a replace operation that re-orders the children

Private pLegs As Collection

Private Sub Class_Initialize()
    Set pLegs = New Collection
End Sub

Public Property Get Items() As Collection
    Set Items = pLegs
End Property

Public Sub add(Leg As Leg)
    pLegs.add Leg, Leg.name
End Sub

Public Property Get complete() As Boolean
    ' check if all the legs are complete
    Dim thisLeg As Leg
    For Each thisLeg In pLegs
        If Not thisLeg.Processed Then
            complete = False
            Exit Property
        End If
    Next thisLeg
    complete = True
End Property

Public Sub replace(original As Leg, before As Leg, after As Leg)
   
    ' ok, swap the original for the new ones
    pLegs.add before, before.name, original.name
    pLegs.add after, after.name, original.name
    pLegs.Remove original.name
End Sub

Public Function determineTargetLegs() As Legs
    ' loop through legs
    While pLegs.complete <> True
        ' ok, loop through them
        Dim thisLeg As Leg
        For Each thisLeg In pLegs.Items
            If Not thisLeg.Processed Then
    
                ' workout whole leg score
                
                ' cycle through this leg
                
                Dim bestLegs As Legs
                  
                  ' slice at this time
                  
                  ' have we created slices?
                  
                      ' calculate sum of before/after slices
                      
                      ' remember best score
                      
                ' calculate best slice improvement over whole leg
                
                ' better?
                
                  ' replace this leg with the two new legs
                
                
                
'                If thisLeg.name = "L2" Then
'                    ' ok, do the replace
'                    pLegs.replace thisLeg, beforeLeg, afterLeg
'
'                    ' ok, we need to drop out of this loop
'                    Exit For
                'testStr = testStr & thisLeg.name & ","
                'thisLeg.Processed = True
            End If
        Next thisLeg
    Wend
    
    
End Function

