VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Legs"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit
' this is series of legs
' == It's made into a class so that it have custom processing,
' == such as a replace operation that re-orders the children

Private pLegs As Collection

Private Sub Class_Initialize()
    Set pLegs = New Collection
End Sub

Public Property Get Items() As Collection
    Set Items = pLegs
End Property

Public Sub add(Leg As Leg)
    pLegs.add Leg, Leg.Name
End Sub

Public Property Get complete() As Boolean
    ' check if all the legs are complete
    Dim thisLeg As Leg
    For Each thisLeg In pLegs
        If Not thisLeg.Processed Then
            complete = False
            Exit Property
        End If
    Next thisLeg
    complete = True
End Property

Public Sub replace(original As Leg, before As Leg, after As Leg)
   
    ' ok, swap the original for the new ones
    pLegs.add before, before.Name, original.Name
    pLegs.add after, after.Name, original.Name
    pLegs.Remove original.Name
End Sub


' slice this set of legs according to bearing rates
' noSlice - comma separate list of leg names (including wildcards) that should
'           not be sliced
Public Function determineTargetLegs(noSlice As String) As Legs
    Dim res As Legs
    Set res = New Legs
    
    Dim zigBuffer As Double, optimiseThreshold As Double, sliceDelta As Double, diags As Integer
    Dim stepSize As Integer
    zigBuffer = 20
    optimiseThreshold = 0.05
    sliceDelta = 200
    diags = 0 ' Or Optimisation.dSLICE_SCORES   '  Or Optimisation.dOPTIMISE_SCORES
    stepSize = 4

    ' loop through legs
    While Me.complete <> True And res.Items.Count < 4
        ' ok, loop through them
        Dim thisLeg As Leg
        For Each thisLeg In Items
            If Not thisLeg.Processed Then
    
                ' workout whole leg score
                Dim newLegs As Legs
                
                Debug.Print "About to slice " & thisLeg.Name & " Length:" & thisLeg.times.Count
                
                If LegUtils.canSlice(thisLeg.Name, noSlice) Then
                    
                    ' use solver to optimise leg
                    Set newLegs = Optimisation.sliceThisLeg(thisLeg, zigBuffer, _
                        optimiseThreshold, sliceDelta, diags, stepSize)
                    
                    ' have a look at the scores
                   ' Dim calcCtr As Integer
                   ' For calcCtr = 1 To thisLeg.calcs.Count
                   ' Next calcCtr
                   ' thisLeg.calcs.Item
                    
                    ' did we get some?
                    If newLegs Is Nothing Then
    '                If Not newLegs Is Nothing And newLegs.Items.Count = 2 Then
                        ' ok, no slicing. This leg is done,
                        ' we can move onto the next one
                        thisLeg.Processed = True
                        
                        res.add thisLeg
                    Else
                        ' ok, get swapping
                        replace thisLeg, newLegs.Items.Item(1), newLegs.Items.Item(2)
                        
                        ' and exit this for loop (so we restart at the beginning)
                        Exit For
                    End If
                Else
                    ' ok, we can't slice it. mark it as processed
                    res.add thisLeg
                    thisLeg.Processed = True
                    
                    Debug.Print "Not slicing " & thisLeg.Name
                End If
            End If
        Next thisLeg
    Wend
    
    Set determineTargetLegs = res
End Function

