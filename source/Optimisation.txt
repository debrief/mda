Attribute VB_Name = "Optimisation"
Option Explicit

Const MAX_DOUBLE As Double = 1.79769313486231E+308


' whether to output slicing scores
Public Const dSLICE_SCORES = 1
Public Const dITERATION_SCORES = 2
Public Const dOPTIMISE_SCORES = 4

' we use thia global to store the data we're using for the
' in-worksheet optimiser
Private globalLeg As Leg

' way of passing diangostic level to the optimiser code
Private globalDiag As Long

' work out an optimal slicing for this leg
' times: the bearing times
' bearings: the bearings
' zigBuffer: the time period we allow for a turn
' optimiseThreshold: when optimisation is stable
' sliceDelta: how much better the slices have to be
Public Function sliceThisLeg(thisLeg As Leg, _
    zigBuffer As Double, optimiseThreshold As Double, sliceDelta As Double, _
    diag As Integer, stepSize As Integer) As Legs
    
    Dim results As Legs
    
    ' store the diagnostic level
    globalDiag = diag
    
    ' ok, find the overall score
    thisLeg.OptimiseScore = scoreFor(thisLeg, optimiseThreshold)
    
    If (diag And Optimisation.dSLICE_SCORES) Then
        Debug.Print "Overall leg score:" & thisLeg.OptimiseScore
    End If
    
    ' and now work through the slices
    Dim tLen As Integer
    tLen = thisLeg.times.Count
    Dim ctr As Integer
    
    Dim bestSoFar As Double
    bestSoFar = MAX_DOUBLE
    
    For ctr = 1 To tLen Step stepSize
        ' get the time at this point
        Dim tNow As Double
        tNow = thisLeg.times.Item(ctr)
    
        ' ok, slice it at this point
        Dim theLegs As Legs
        Set theLegs = SliceIntoLegs(thisLeg, tNow, zigBuffer)
        
        Dim before As Leg, after As Leg
        Set before = theLegs.Items(1)
        Set after = theLegs.Items(2)
        
        ' ok, we only both with the calcs if we actually have items
        If before.hasData And after.hasData Then
            
            ' right, get the score for the two slices
            before.OptimiseScore = scoreFor(before, optimiseThreshold)
            after.OptimiseScore = scoreFor(after, optimiseThreshold)
                       
            If (diag And Optimisation.dSLICE_SCORES) Then
                Debug.Print "Slice:" & ctr & " of " & tLen & " at:" & tNow & " - Before score:" & _
                    before.OptimiseScore & ", After score:" & after.OptimiseScore
            End If
                       
            ' find the leg lengths (ready to normalise)
            Dim totalCuts As Integer
            Dim beforeLen As Integer
            Dim afterLen As Integer
            beforeLen = before.times.Count
            afterLen = after.times.Count
            totalCuts = beforeLen + afterLen
                    
            ' did we get any answers?
            If (before.OptimiseScore > 0) And (after.OptimiseScore > 0) Then
                ' ok, normalise their scores
                before.OptimiseScore = before.OptimiseScore * beforeLen / totalCuts
                after.OptimiseScore = after.OptimiseScore * afterLen / totalCuts
                
                ' and calculate the result
                Dim result As Double
                result = before.OptimiseScore + after.OptimiseScore
                
                ' store the calculations
                Dim thisCalc As CalcDetail
                Set thisCalc = New CalcDetail
                thisCalc.setScores tNow, before.OptimiseScore, after.OptimiseScore, result
                            
                ' ok, store the results
                thisLeg.calcs.add thisCalc, "" & tNow
                            
                ' is it better?
                If (result < bestSoFar) Then
                    If (diag And Optimisation.dSLICE_SCORES) Then
                        Debug.Print "+ Improved score: " & result & " whole leg is:" & thisLeg.OptimiseScore
                    End If
    
                    bestSoFar = result
                    
                    ' and remember the legs
                    Set results = theLegs
                End If
            End If
        End If
        
    Next ctr
    
    ' ok, compare the scores
    If (thisLeg.OptimiseScore - bestSoFar > sliceDelta) Then
        ' good enough. keep the results
        Debug.Print "Slices better, improvement:" & Int(thisLeg.OptimiseScore - bestSoFar)
    Else
        ' no, not good enough. forget them
        Set results = Nothing
        
        Debug.Print ("Slices not better, best:" & Int(bestSoFar) & " overall:" & Int(thisLeg.OptimiseScore))
    End If
    
    Set sliceThisLeg = results
    
End Function

Private Function scoreFor(thisLeg As Leg, threshold As Double) As Double

    Dim result As Double
    result = 0
    
    ' check we have a minimum number of values
    If (thisLeg.times.Count > 1) Then
    
        ' switch off screen updates
        Application.ScreenUpdating = False
    
        With Worksheets("Analysis")
    
        ' put the datasets into global space (so the forecast function can see them)
        Set globalLeg = thisLeg
        
'        Debug.Print "Optimising leg starting at:" & thisLeg.times(1)
    
        ' ok, setup the optimiser
        SolverReset
        
        ' get the first bearing
        Dim firstBearing As Double
        firstBearing = thisLeg.bearings.Item(1)
        
        ' set the threshold for acceptance
        
        ' set the allowable step size
        SolverOptions precision:=0.001, iterations:=50
        SolverOK SetCell:=Range("OptScore"), _
           MaxMinVal:=2, _
           ByChange:=Range("OptB:OptQ")
        ' set the bearing max/min (Since it will be close to the first bearing
        solveradd Range("optB"), 3, firstBearing - 2
        solveradd Range("optB"), 1, firstBearing + 2
        
        ' give the P and Q a range
        solveradd Range("optP"), 3, -15
        solveradd Range("optP"), 1, 15
        
        ' give the P and Q a range
        solveradd Range("optQ"), 3, -15
        solveradd Range("optQ"), 1, 15
        
        ' and set the initial bearing value
        Range("optB").value = firstBearing
        
    '    Debug.Print "Setting initial bearing to:" & firstBearing
        
        ' run the solver
        SolverSolve UserFinish:=True
        
        ' get the result out of the box
        Dim resStr
        resStr = Range("OptScore")
        If (IsNumeric(resStr)) Then
        result = resStr
        Else
            Debug.Print "** Optimise result isn't string!"
        End If
        
     '   Debug.Print "Optimise score was:" & Int(result)
        
        End With
        
        ' and switch updatse back on
        Application.ScreenUpdating = True
      
        If (globalDiag And Optimisation.dOPTIMISE_SCORES) Then
            Debug.Print "B:" & Range("OptB") & ", P:" & Range("OptP") & ", Q:" & _
                  Range("OptQ") & ", score:" & Range("OptScore") & " Items:" & thisLeg.times.Count
        End If

        
    End If
    
    ' store the result
    scoreFor = result
    
End Function


Public Function calculateScore2(B As Double, P As Double, Q As Double) As Double
    Dim runningTotal
    runningTotal = 0
        
    Dim times As Collection
    Dim bearings As Collection
    
    If (True) Then
    
        ' do we have global data?
        If (globalLeg Is Nothing) Then
        
            Debug.Print "creating globs"
            ' create some data
            Dim data As Legs
            Set data = Tests.createDemoLegs
            Dim track As Leg
            Set track = data.Items(1)
            Set globalLeg = track
        End If
        
        Set times = globalLeg.times
        Set bearings = globalLeg.bearings
        
        Dim StartTime
        StartTime = times.Item(1)
    
        ' ok, loop through the times
        Dim counter As Integer
        
        For counter = 1 To times.Count
            Dim thisTime
            thisTime = times.Item(counter)
            
            Dim elapsed As Double
            elapsed = thisTime - StartTime
            
            Dim thisBearing
            thisBearing = bearings.Item(counter)
            
            If elapsed > 0 Then
                ' ok, calculate it
                Dim forecast
                forecast = forecastValue(elapsed, B, P, Q)
                
                Dim score
                score = forecast - thisBearing
                score = score * score
                
                runningTotal = runningTotal + score
            End If
        Next counter
        
        If (runningTotal > 0) Then
            runningTotal = Sqr(runningTotal)
        End If
        
    End If
    
    If (globalDiag And Optimisation.dITERATION_SCORES) Then
        Debug.Print "B:" & B & ", P:" & P & ", Q:" & Q & ", score:" & runningTotal & " Items:" & times.Count
    End If
    
    calculateScore2 = runningTotal
    
End Function

Private Function toRad(value As Double) As Double
    Const pi = 3.14159
    toRad = (value / 180) * pi
End Function

Private Function toDeg(value As Double) As Double
    Const pi = 3.14159
    toDeg = (value * 180) / pi
End Function

Private Function forecastValue(elapsedTime, B As Double, P As Double, Q As Double)
    Dim dx, dy
    dx = Cos(toRad(B)) + Q * elapsedTime
    dy = Sin(toRad(B)) + P * elapsedTime
    forecastValue = Excel.WorksheetFunction.Atan2(dx, dy)
End Function

Public Sub testOptimise()
    Debug.Print "Test optimise"
    
    ' ok, create a straight line leg
    Dim testLeg As Leg
    Set testLeg = Factory.createLeg("Straight")
    
    With testLeg.times
        .add 2
        .add 4
        .add 6
        .add 8
        .add 10
        .add 12
        .add 14
    End With
    
    With testLeg.bearings
        .add 20
        .add 40
        .add 60
        .add 80
        .add 60
        .add 40
        .add 20
    End With
    
    ' ok, test the calculate algorithm
    Set globalLeg = testLeg
    
    ' we want to see the optimise steps
    globalDiag = dITERATION_SCORES
    
    Dim score As Double
    score = calculateScore2(2, 2, 2)
    score = calculateScore2(4, 4, 4)
    score = calculateScore2(123, 456, 789)
    
    Debug.Print "this score is:" & score
                
    Dim threshold As Double
    threshold = 0.0001
    score = scoreFor(testLeg, threshold)
          
    ' clear the optimise flags
    globalDiag = 0
    

    Debug.Print "score for:" & threshold & " is " & score
    
    Dim slices As Legs
 '   Set slices = sliceThisLeg(testLeg, 2, 0.001, 0.001, Optimisation.dSLICE_SCORES)
    
End Sub




