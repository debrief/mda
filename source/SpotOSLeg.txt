Attribute VB_Name = "SpotOSLeg"
Option Explicit

Public Sub testGetOwnshipLegs()
    Debug.Print "testGetOwnshipLegs"

    ' get the data
    Dim osData As Leg
'    Set osData = loadOwnship("A3:I27243", 2, 7)
  '  Set osData = loadOwnship("R3:U20860", 1, 4)
    Set osData = loadOwnship("Z3:AC6858", 1, 3)
        
    ' data 3
'    Const turnThreshold = 80
'    Const steadyThreshold = 70
'    Const steadyWait = 320
    
    ' data 2
    Const turnThreshold = 20
    Const steadyThreshold = 20
    Const steadyWait = 190
    
    ' get ready to store results
    Dim osLegs As Collection
    Set osLegs = sliceOwnship(osData, turnThreshold, steadyThreshold, steadyWait)
    
    outputTurns osLegs
    Exit Sub
    
    Dim oLeg As OwnshipLeg
    Debug.Print "0, 0"
    For Each oLeg In osLegs
        Debug.Print oLeg.StartTime & ", 0"
        Debug.Print oLeg.StartTime & ", 20"
        Debug.Print oLeg.EndTime & ", 20"
        Debug.Print oLeg.EndTime & ", 0"
    Next oLeg
    
End Sub


Private Function sliceOwnship(osData As Leg, turnThreshold As Double, _
                         steadyThreshold As Double, steadyWait As Long) As Collection
    Dim res As Collection
    Set res = New Collection

    Dim lastSign As Integer
    Dim lastInversion As Long

    Dim lastTime As Long
    Dim lastCourse As Double
    
    Dim runningTotal
    
    ' keep track of how long we continue checking for a final wiggle
    Dim checkEndUntil As Long
    
    ' keep track of when the leg probably finished
    Dim probableTurnEnd As Long
    Dim turnStart As Long
    Dim legStart As Long
    Dim inTurnInversion As Long
        
    Dim inTurn As Boolean
    inTurn = False

    Dim ctr As Long
    For ctr = 1 To osData.times.Count
 '   For ctr = 1 To 2200
        Dim thisT As Long
        thisT = osData.times.Item(ctr)
        Dim course As Double
        course = osData.bearings.Item(ctr)
        
      '  Debug.Print course
        
        If (ctr > 1) Then
            Dim deltaTime As Long
            Dim deltaCourse As Double
            
            deltaTime = thisT - lastTime
            deltaCourse = course - lastCourse
            
            ' special handling - for passing through 360
            If (deltaCourse > 100) Then
                deltaCourse = deltaCourse - 360
            ElseIf (deltaCourse < -100) Then
                deltaCourse = deltaCourse + 360
            End If
        
            ' calculate the diff
            Dim thisBRate As Double
            thisBRate = (deltaCourse) / (deltaTime)
        
            ' calculate the sign
            Dim thisSign As Integer
            thisSign = Sgn(thisBRate)
            
            ' has it changed?
            If (thisSign <> lastSign) Then
            
                ' ok, the sign has changed. This means we've changed from one turn/oscillation
                ' to then next
            
                ' are we already a recognised turn?
                If inTurn Then
                
                    ' have we calculated the turn time?
                    If (checkEndUntil > 0) Then
                    
                        ' we've got some wiggle in the checking period turn, remember it
                        inTurnInversion = thisT
                    
                        If (thisT < checkEndUntil) Then
                            ' ok, we still have to carry on checking.
                            
                            ' ok, is this still a perturbation we're interested in?
                            If (runningTotal > steadyThreshold) Then
                                ' ok, we need a new steady time
                                checkEndUntil = thisT + steadyWait
                                
                                ' this new wiggle may have been the actual end of the turn
                                probableTurnEnd = thisT
                                                            
                            '    Debug.Print " extending turn after turn of:" & Int(runningTotal) & " end:" & probableTurnEnd
                            Else
                                ' ok, we just carry on waiting
                            '    Debug.Print "ignoring zig with total:" & runningTotal & " remaining secs:" & (checkEndUntil - thisT)
                            End If
                        Else
                            ' ok, time up. we can use the finish time
                        
                        End If
                        
                    Else
                        ' ok, we've finished our large turn. track when we continue tracking until
                        checkEndUntil = thisT + steadyWait
                        
                        ' this may have been the end of the turn
                        probableTurnEnd = thisT
                    End If
                    
                    
                End If
                
               ' Debug.Print "Inversion at:" & lastInversion & " was:" & lastSign & " total:" & runningTotal
                                    
                ' track this oscillation
                lastInversion = thisT
                                    
                ' remember it happened
                lastSign = thisSign
                                
                ' and clear the area
                runningTotal = 0
            Else
                ' build up the running total
                runningTotal = runningTotal + Abs(deltaTime * deltaCourse)
                
                ' are we still tracking the end of a turn?
                If inTurn Then
                    ' ok, has the time elapsed?
                    If checkEndUntil > 0 Then
                        If thisT >= checkEndUntil And (inTurnInversion <> 0) Then
                            ' ok, turn complete
                            inTurn = False
                            
                            ' clear
                            checkEndUntil = 0
                            
             '               Debug.Print "turn complete at:" & thisT
                            
                            ' ok, the last inversion was the leg start
                            legStart = probableTurnEnd
                        End If
                    End If
                End If
                
                ' hey, is this a big turn?
                If (runningTotal > turnThreshold) And Not inTurn Then
                    
                    ' ok, track the time the turn started
                    turnStart = lastInversion
                    
                    Debug.Print "Leg complete. started at:" & legStart & " ended at:" & lastInversion & " area under curve:" & Int(runningTotal)
                    
                    ' ok, the last leg is complete - we're in a turn
                    Dim newLeg As OwnshipLeg
                    Set newLeg = New OwnshipLeg
                    newLeg.StartTime = legStart
                    newLeg.EndTime = lastInversion
                    res.add newLeg
                    
                    If lastInversion = 5732 Then
                        Debug.Print "herE2"
                    End If
                    
                    Debug.Print "Turn started at:" & lastInversion & " total now:" & runningTotal
                    inTurn = True
                    
                    inTurnInversion = 0

                End If

            End If
            
        End If
        
        ' ok, capture the state
        lastTime = thisT
        lastCourse = course
       
    Next ctr
    
    Set sliceOwnship = res
End Function


Private Function loadOwnship(rangeStr As String, elapsedCol As Integer, courseCol As Integer) As Leg
    Dim res As Leg
    Set res = Factory.createLeg("OS")
    
    Dim rng As Range
    Set rng = ActiveWorkbook.Sheets("Scen1_States").Range(rangeStr)
    Dim thisR As Range
    For Each thisR In rng.Rows
        Dim elapsed As Long
        elapsed = thisR.Cells(1, elapsedCol).value
        Dim course As Double
        course = thisR.Cells(1, courseCol).value
        
        res.times.add elapsed
        res.bearings.add course
        
    Next thisR
    
    Set loadOwnship = res
    
End Function

Private Sub outputTurns(oLegs As Collection)
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Dim rng As Range
    Set rng = ActiveWorkbook.Sheets("Scen1_States").Range("W3:X20860")
    rng.Clear
    Dim thisLeg As OwnshipLeg
    Dim ctr
    ctr = 1
    For Each thisLeg In oLegs
        rng.Cells(ctr, 1).value = thisLeg.StartTime
        rng.Cells(ctr, 2).value = 0
        rng.Cells(ctr + 1, 1).value = thisLeg.StartTime
        rng.Cells(ctr + 1, 2).value = 20
        rng.Cells(ctr + 2, 1).value = thisLeg.EndTime
        rng.Cells(ctr + 2, 2).value = 20
        rng.Cells(ctr + 3, 1).value = thisLeg.EndTime
        rng.Cells(ctr + 3, 2).value = 0
        
        ctr = ctr + 4
    Next thisLeg
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic

End Sub

