Attribute VB_Name = "Collate"
Option Explicit

Const OWNSHIP_LEGS_RANGE = "dOwnshipLegs"
Const ANALYSIS_SHEET_RANGE = "dAnalysisPane"


Public Sub outputLegSliceScores(tLegs As Legs, origin As String)
    Dim outArray As Variant
    
    ActiveWorkbook.Worksheets("Analysis").Range(origin).Resize(10000, 2).Clear
    
    ' work out how many items we need
    Dim calcCtr As Integer
    Dim thisL As Leg
    For Each thisL In tLegs.Items
        calcCtr = calcCtr + thisL.calcs.Count
    Next thisL
    
    Dim offValue As Integer
    offValue = ActiveWorkbook.Worksheets("Analysis").Range("offValue").value
    
    ReDim outArray(calcCtr, 1)
    Dim i As Integer
    Dim rowCtr As Integer
    rowCtr = 0
    Dim oLeg As Leg
    Dim lastTime
    lastTime = 0
    For Each oLeg In tLegs.Items
        Dim thisCalc As CalcDetail
        For Each thisCalc In oLeg.calcs
            outArray(rowCtr, 0) = thisCalc.calcTime
            outArray(rowCtr, 1) = thisCalc.calcSum
        Next thisCalc
        
        rowCtr = rowCtr + 1
    Next oLeg
    
    ActiveWorkbook.Worksheets("Analysis").Range(origin).Resize(calcCtr, 2).value = outArray

End Sub

Public Sub outputWholeLegScores(tLegs As Legs, origin As String)
    Dim outArray As Variant
    
    ActiveWorkbook.Worksheets("Analysis").Range(origin).Resize(10000, 2).Clear
    
    Dim numPTs As Integer
    numPTs = tLegs.Items.Count
    
    Dim offValue As Integer
    offValue = ActiveWorkbook.Worksheets("Analysis").Range("offValue").value
    
    ReDim outArray(numPTs * 4, 1)
    Dim i As Integer
    Dim rowCtr As Integer
    rowCtr = 0
    Dim oLeg As Leg
    Dim lastTime
    lastTime = 0
    For Each oLeg In tLegs.Items
        outArray(rowCtr, 0) = oLeg.times(1)
        outArray(rowCtr, 1) = offValue
        outArray(rowCtr + 1, 0) = oLeg.times(1)
        outArray(rowCtr + 1, 1) = oLeg.OptimiseScore
        outArray(rowCtr + 2, 0) = oLeg.times(oLeg.times.Count)
        outArray(rowCtr + 2, 1) = oLeg.OptimiseScore
        outArray(rowCtr + 3, 0) = oLeg.times(oLeg.times.Count)
        outArray(rowCtr + 3, 1) = offValue
        
        rowCtr = rowCtr + 4
    Next oLeg
    
    ActiveWorkbook.Worksheets("Analysis").Range(origin).Resize(numPTs * 4, 2).value = outArray

End Sub

Public Sub outputOwnshipLegs(data As Collection, origin As String)
    Dim outArray As Variant
    
    ActiveWorkbook.Worksheets("Analysis").Range(origin).Resize(10000, 2).Clear
    
    Dim numPTs As Integer
    numPTs = data.Count
    
    Dim onValue As Integer
    Dim offValue As Integer
    onValue = ActiveWorkbook.Worksheets("Analysis").Range("onValue").value
    offValue = ActiveWorkbook.Worksheets("Analysis").Range("offValue").value
    
    ReDim outArray(numPTs * 4, 1)
    Dim i As Integer
    Dim rowCtr As Integer
    rowCtr = 0
    Dim oLeg As TimePeriod
    Dim lastTime
    lastTime = 0
    For i = 1 To numPTs
        Set oLeg = data.Item(i)
        outArray(rowCtr, 0) = oLeg.StartTime
        outArray(rowCtr, 1) = onValue
        outArray(rowCtr + 1, 0) = oLeg.StartTime
        outArray(rowCtr + 1, 1) = offValue
        outArray(rowCtr + 2, 0) = oLeg.EndTime
        outArray(rowCtr + 2, 1) = offValue
        outArray(rowCtr + 3, 0) = oLeg.EndTime
        outArray(rowCtr + 3, 1) = onValue
        
        rowCtr = rowCtr + 4
    Next i
    
    ActiveWorkbook.Worksheets("Analysis").Range(origin).Resize(numPTs * 4, 2).value = outArray

End Sub


Public Sub outputTrack(track As OwnshipLeg, origin As String)
    Dim outArray As Variant
    
    ActiveWorkbook.Worksheets("Analysis").Range(origin).Resize(10000, 2).Clear
    
    Dim numPTs As Integer
    numPTs = track.times.Count
    
    ReDim outArray(numPTs, 1)
    Dim i As Integer
    For i = 0 To numPTs - 1
        outArray(i, 0) = track.times(i + 1)
        outArray(i, 1) = track.courses(i + 1)
    Next i
    
    ActiveWorkbook.Worksheets("Analysis").Range(origin).Resize(numPTs, 2).value = outArray
End Sub

Public Sub outputBearings(track As Leg, origin As String)
    Dim outArray As Variant
    
    ActiveWorkbook.Worksheets("Analysis").Range(origin).Resize(10000, 2).Clear
    
    Dim numPTs As Integer
    numPTs = track.times.Count
    
    ReDim outArray(numPTs, 1)
    Dim i As Integer
    For i = 0 To numPTs - 1
        outArray(i, 0) = track.times(i + 1)
        outArray(i, 1) = track.bearings(i + 1)
    Next i
    
    ActiveWorkbook.Worksheets("Analysis").Range(origin).Resize(numPTs, 2).value = outArray
End Sub

Public Function getTrackFromRange(Range As String, trackName As String, _
             colIndex As Integer, sampleRate As Double) As OwnshipLeg
    Dim res As OwnshipLeg
    Set res = Factory.createOwnshipLeg(trackName)
    
    Dim oSheet As Worksheet
    Set oSheet = ActiveWorkbook.Worksheets("Tracks")
    
    Dim oTrackIn As Range
    Set oTrackIn = oSheet.Range(Range)
      
    Dim lastT As Double
    lastT = -1
    
    Dim thisR As Range
    For Each thisR In oTrackIn.Rows
        Dim thisT As Long
        Dim thisVal As Date
        thisVal = thisR.Cells(1, 1)
        thisT = Date2Long(thisVal + 1)
        
        ' see if we need to skip it
        If (lastT = -1) Or (thisT - lastT >= sampleRate) Then
            Dim thisC As Double
            thisC = thisR.Cells(1, colIndex)
            
            res.times.add thisT
            res.courses.add thisC
            
            ' remember the sample time
            lastT = thisT
        End If
    Next thisR
    
    Set getTrackFromRange = res
End Function

Public Function getSensorDataFromRange(Range As String, sensorName As String, sampleRate As Double) As Leg
    Dim res As Leg
    Set res = Factory.createLeg("All data")
   
    Dim sSheet As Worksheet
    Set sSheet = ActiveWorkbook.Worksheets(sensorName)
    
    Dim sensorDataIn As Range
    Set sensorDataIn = sSheet.Range(Range)
    
    Dim lastT As Long
    Dim thisR As Range
    lastT = -1
    For Each thisR In sensorDataIn.Rows
        ' is it empty?
        If IsEmpty(thisR.Cells(1, 1)) Then
            ' ok, we're done
            Exit For
        Else
            Dim thisT As Long
            thisT = Date2Long(thisR.Cells(1, 1) + 1)
            
            ' see if we need to skip it
            If (lastT = -1) Or (thisT - lastT >= sampleRate) Then
                Dim thisB As Double
                thisB = thisR.Cells(1, 3)
                
                res.times.add thisT
                res.bearings.add thisB
                
                lastT = thisT
            End If
        End If
    Next thisR
    
    Set getSensorDataFromRange = res
End Function

' aah, I produced this when I thought we needed a
' list of ownship legs. But, the analysis data is
' already tagged with the ownship leg, so we don't need it
' So, we don't need it :-(
'Public Function getOwnshipLegs() As Collection
    ' get the data
'    Dim data As Range
'    Set data = Range(OWNSHIP_LEGS_RANGE)
'
'    ' ready to store results
'    Dim res As Collection
'    Set res = New Collection
'
'    Dim thisRow As Range
'    Dim ctr As Integer
'    Dim thisLeg As TimePeriod
'    ctr = 0
'    For Each thisRow In data.Rows
'        If ctr = 0 Then
'            ' ok, skip the first row
'        Else
'            Dim secs As Integer
'            Dim legName As String
'            secs = thisRow.Cells(1, 1)
'            legName = thisRow.Cells(1, 2).Text
'
'            ' did it work
'            If (legName <> "") Then
'
'                ' is this a new leg?
'                If Not (legName = "#N/A") Then
'                    ' ok, new leg
'                    Set thisLeg = New TimePeriod
'                    thisLeg.StartTime = secs
'                Else
'                    thisLeg.EndTime = secs
'
'                    ' and remember it
'                    res.add thisLeg
'                End If
'            Else
'                ' ok, we're done
'                Exit For
'            End If
 '       End If
 '
'        ctr = ctr + 1
'    Next thisRow
'
'    Set getOwnshipLegs = res
'
'End Function

' test that we correctly read in ownship legs
'Public Sub testGetOwnshipLegs()
'    Debug.Print "testGetOwnshipLegs"
'
'    Dim res As Collection
'    Set res = getOwnshipLegs
'
'    If res Is Nothing Then
'        Debug.Print "didn't get anything"
'    End If
'
'    If res.Count = 0 Then
'        Debug.Print "didn't get any rows"
'    End If
'
'    If res.Count <> 19 Then
'        Debug.Print "Didn't get " & 19 & " rows, got:" & res.Count
'    End If
'
'End Sub
